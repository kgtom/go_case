参考：https://crane-yuan.github.io/archives/
https://github.com/aosen/alg/blob/master/sort/sort.go
package main

import "fmt"

func buildHeap(array []int, length int) {
	var i, j int
	for i = 1; i < length; i++ {
		for j = i; j > 0 && array[j] > array[(j-1)/2]; j = (j - 1) / 2 {

			array[j], array[(j-1)/2] = array[(j-1)/2], array[j]
			fmt.Print(array)
		}
	}
}
func heapSort(array []int, length int) {
	array[0], array[length-1] = array[length-1], array[0]
	if length <= 2 {
		return
	}
	i, j := 0, 0
	for {
		j = 2*i + 1
		if j+1 < length-1 {
			if array[j] < array[j+1] {
				j = j + 1
			}
		} else if j >= length-1 {
			break
		}
		array[i], array[j] = array[j], array[i]
		i = j
	}
	heapSort(array, length-1)
}

//冒泡
func BubbleSort(s1 []int) []int {
	for i := 0; i < len(s1)-1; i++ {
		for j := i; j < len(s1); j++ {

			if s1[i] < s1[j] {
				Swap(s1, i, j)
			}
		}
	}
	return s1
}

//选择
func SelectSort(s []int) {

	for i := 0; i < len(s)-1; i++ {
		k := i
		for j := i + 1; j < len(s); j++ {
			if s[j] < s[k] {
				k = j
			}
		}
		if k != i {
			Swap(s, k, i)
		}
	}
}

//快排
func quickSort(source []int, l, u int) {
	if l < u {
		m := partition(source, l, u)
		quickSort(source, l, m-1)
		quickSort(source, m, u)
	}
}

func partition(source []int, l, u int) int {
	var (
		pivot = source[l]
		left  = l
		right = l + 1
	)
	for ; right < u; right++ {
		if source[right] <= pivot {
			left++
			source[left], source[right] = source[right], source[left]
		}
	}
	source[l], source[left] = source[left], source[l]
	return left + 1
}

//插入排序
func insertionSort(s1 []int) {
	for i := 1; i < len(s1); i++ {
		for j := i; j > 0; j-- {
			if s1[j] < s1[j-1] {
				Swap(s1, j, j-1)
			}

		}
	}
}

//希尔排序
func ShellSort(arr []int) []int {
	length := len(arr)
	// 确定h
	h := 1
	for h < length/3 {
		h = h*3 + 1
	}
	for h >= 1 {
		for i := h; i < length; i++ {
			for j := i; j >= h && arr[j] < arr[j-h]; j -= h {
				arr[j], arr[j-h] = arr[j-h], arr[j]
			}
		}
		h /= 3
	}
	return arr
}

//交换
func Swap(s1 []int, i int, j int) {
	s1[i], s1[j] = s1[j], s1[i]
}
func main() {
	// primes := [6]int{3, 11, 5, 2, 13, 7}
	// fmt.Println("orginal", primes)
	// buildHeap(primes[:], len(primes))
	// fmt.Println("Max heap", primes)
	// heapSort(primes[:], len(primes))
	// fmt.Println("after sorting", primes)

	s1 := []int{2, 5, 1, 3}
	fmt.Printf("len of s1: %d \n", len(s1))
	// BubbleSort(s1)
	// fmt.Printf("BubbleSort: %v \n", s1)
	// SelectSort(s1)
	// fmt.Printf("SelectSort:%v \n", s1)

	//quickSort(s1, 0, len(s1))
	//fmt.Printf("quickSort:%d \n", s1)
	//insertionSort(s1)
	//fmt.Printf("insertionSort:%v ", s1)

	ShellSort(s1)
	fmt.Printf("shellSort: %v", s1)

}

