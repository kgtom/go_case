package main

import (
	"log"
	"sync"

	"github.com/nsqio/go-nsq"
)

func main() {
	ReveiceNSQ()
	//ProducerTest()
	//ReceiveNsqMsq()
}

// 发送消息
func ProducerTest() {
	config := nsq.NewConfig()

	w, _ := nsq.NewProducer("192.168.0.28:4150", config)
	err := w.Ping()
	if err != nil {
		log.Panic("ping  tests failed")
		w.Stop()
	}
	err = w.Publish("ibelog", []byte("test"))
	if err != nil {
		log.Panic("Could not connect")
	}

	w.Stop()
}

//第一种获取msg方式
func ReceiveNsqMsq() {
	wg := &sync.WaitGroup{}
	wg.Add(10)

	config := nsq.NewConfig()
	q, _ := nsq.NewConsumer("ibelog", "dblog-dev", config)
	//q.AddHandler(nsq.HandlerFunc(HandleMsg))
	//err := q.ConnectToNSQD("192.168.0.28:4150") //q.ConnectToNSQLookupd("192.168.0.28:4161")
	q.AddHandler(nsq.HandlerFunc(func(message *nsq.Message) error {
		log.Printf("Got a message: %v", string(message.Body))

		wg.Add(-1)
		return nil
	}))
	err := q.ConnectToNSQD("192.168.0.28:4150")
	if err != nil {
		log.Panic("Could not connect")
	}
	wg.Wait()

}

/// 第二种获取msg方式
type NSQHandler struct {
}

func (this *NSQHandler) HandleMessage(message *nsq.Message) error {
	log.Println("Got message data:", string(message.Body))
	return nil
}
func ReveiceNSQ() {
	waiter := sync.WaitGroup{}
	waiter.Add(1)

	go func() {
		defer waiter.Done()

		consumer, err := nsq.NewConsumer("ibelog", "dblog-dev", nsq.NewConfig())
		if nil != err {
			log.Println(err)
			return
		}

		consumer.AddHandler(&NSQHandler{})
		err = consumer.ConnectToNSQD("192.168.0.28:4150")
		if nil != err {
			log.Println(err)
			return
		}

		select {}
	}()

	waiter.Wait()
}
