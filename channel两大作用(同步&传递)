package main

import (
	"fmt"
	"time"
)

//channel 作用：1.同步 2. 传递数据
func main() {
	//1.同步
	CaseSyncFun()

	//2.数据传递--经典生产者与消费者
	CaseSendFunc()
}

func CaseSyncFun() {
	//1.channel 无缓冲 用于同步
	ch := make(chan bool)

	go func() {

		doWork()

		ch <- true //发送型号

	}()
	doSomething() //做一些其它事情
	val := <-ch   // 阻塞主goroutine
	fmt.Printf("ch...%v \n", val)
}

func CaseSendFunc() {
	queue := make(chan int, 1)

	go Producer(queue)

	go Consumer(queue)

	time.Sleep(1e9) //让Producer与Consumer完成
}
func doWork() {
	fmt.Print("do work...\n")
}
func doSomething() {
	fmt.Print("do sth...")
}

func Producer(queue chan<- int) {

	for i := 0; i < 10; i++ {
		queue <- i
	}

}

func Consumer(queue <-chan int) {
	for i := 0; i < 10; i++ {
		v := <-queue
		fmt.Println("receive:", v)
	}

}
