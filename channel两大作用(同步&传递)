package main

import "fmt"

func Producer(ch chan int) {

	for i := 0; i < 5; i++ {
		ch <- i
	}

}

func Consumer(ch chan int, q chan bool) {

	for i := 0; i < 5; i++ {
		v, ok := <-ch
		if ok {
			fmt.Println("rec...", v)
		} else {
			fmt.Println("not rec...", v)
		}
		// for v := range queue {
		// 	fmt.Println("receive:", v)
		// }

	}
	q <- true

}

//channel 作用：1.同步 2. 传递数据
func main() {
	//1.同步
	CaseSyncFun()

	//2.数据传递--经典生产者与消费者
	ch := make(chan int)
	quit := make(chan bool)
	go Producer(ch)
	go Consumer(ch, quit)

	//time.Sleep(1e9) //阻塞主goroutine 让Producer与Consumer完成
	//或者使用 quit 退出信号
	v, ok := <-quit
	if ok {
		fmt.Print("v...", v)
	} else {
		fmt.Print("not v")
	}
}

func CaseSyncFun() {
	//1.channel 无缓冲 用于同步
	ch := make(chan bool)

	go func() {

		doWork()

		ch <- true //发送型号

	}()
	doSomething() //做一些其它事情
	val := <-ch   // 阻塞主goroutine
	fmt.Printf("ch...%v \n", val)
}

func doWork() {
	fmt.Print("do work...\n")
}
func doSomething() {
	fmt.Print("do sth...")
}
